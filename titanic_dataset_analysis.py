# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zv6URh9SUVs229JheW8SHqh0MsngYVUZ
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from google.colab import files
import io
import pandas as pd

# 1. Upload the file using the file upload widget
uploaded = files.upload()

# 2. Read the file into a Pandas DataFrame
try:
    data = pd.read_csv(io.BytesIO(uploaded['train.csv']))  # Note the filename in brackets
    print("File uploaded and loaded successfully!")
except KeyError:
    print("Error: 'train.csv' not found in uploaded files. Please upload the file using the file upload widget.")
except Exception as e:
    print(f"An error occurred: {e}")

# 3. Display the first few rows of the DataFrame
if data is not None:  # Check if data was loaded successfully
  data.head()

data = pd.read_csv(io.BytesIO(uploaded['train (3).csv']))

data.columns

print(data.columns)
columns_to_drop = ['PassengerId', 'Name', 'Ticket', 'Cabin']

data.head()

data.describe()

data.isnull().sum()

print(data.columns)

data["Fare"].fillna(data["Fare"].mean(), inplace=True)

data["Fare"].isnull().sum()

Age_data=data[["Survived","Pclass","Age","Fare"]]

with_null=Age_data.loc[Age_data["Age"].isnull()]
without_null=Age_data.loc[Age_data["Age"].notna()]

with_null.describe()

without_null.describe()

from sklearn.linear_model import LinearRegression

from sklearn.linear_model import LinearRegression

X = without_null.drop("Age", axis=1)
y = without_null["Age"]

Age_prediction = LinearRegression()
Age_prediction.fit(X, y)

result_Age_prediction=Age_prediction.predict(with_null.drop("Age",axis=1))

result_Age_prediction

data.loc[data["Age"].isnull(),"Age"]=result_Age_prediction

data.isnull().sum()

average_Age_of_survived=data["Age"].mean()
print(average_Age_of_survived)

data["Sex_Encoded"] = data["Sex"].map({"male": 1, "female": 2})

data.head()

data[["Sex","Sex_Encoded"]].head()

import numpy as np
import matplotlib.pyplot as plt

# Scatter plot
plt.scatter(data["Sex_Encoded"], data["Survived"])

# Regression line
z = np.polyfit(data["Sex_Encoded"], data["Survived"], 1)
p = np.poly1d(z)
plt.plot(data["Sex_Encoded"], p(data["Sex_Encoded"]))

# Axis labels
plt.xlabel("Sex_Encoded")
plt.ylabel("Survived")

# Title and ticks
plt.title('Scatter Plot: Survived vs Sex_Encoded')
plt.yticks([0, 1], ['No', 'Yes'])
plt.xticks([1, 2], ['Male', 'Female'])

# Show plot
plt.show()